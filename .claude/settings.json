{
  "permissions": {
    "allow": ["Bash", "Write", "Edit", "MultiEdit"],
    "deny": []
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Read|Bash",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'cd $(git rev-parse --show-toplevel) && ./.claude/hooks/security_check.sh'",
            "timeout": 2000
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit.*\\.py$|Write.*\\.py$",
        "hooks": [
          {
            "type": "command",
            "command": "for file in $CLAUDE_FILE_PATHS; do [[ \"$file\" == *.py ]] && uvx ruff check --fix \"$file\" && uvx ruff format \"$file\" && (cd backend && uvx ty check --project . \"../$file\" --exit-zero 2>/dev/null || true); done",
            "timeout": 3000
          }
        ]
      },
      {
        "matcher": "Edit.*\\.(ts|js|svelte)$|Write.*\\.(ts|js|svelte)$",
        "hooks": [
          {
            "type": "command",
            "command": "for file in $CLAUDE_FILE_PATHS; do [[ \"$file\" =~ \\.(ts|js|svelte)$ ]] && npx -y oxlint@latest \"$file\" && npx -y prettier@latest --write \"$file\" && (cd frontend && npx dependency-cruiser \"$file\" 2>/dev/null || true); done",
            "timeout": 5000
          }
        ]
      },
      {
        "matcher": "Edit.*\\.py$|Write.*\\.py$",
        "hooks": [
          {
            "type": "command",
            "command": "for file in $CLAUDE_FILE_PATHS; do [[ \"$file\" == *.py ]] && (cd $(git rev-parse --show-toplevel)/backend && uvx tach check && echo \"✅ TACH: Arquitectura validada correctamente\" >&2 || echo \"❌ TACH: Violaciones de arquitectura encontradas\" >&2); done",
            "timeout": 3000
          }
        ]
      }
    ]
  }
}
