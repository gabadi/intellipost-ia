[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "intellipost-ia"
version = "0.1.0"
description = "IntelliPost AI - Intelligent social media posting platform"
# readme = "../README.md"  # Removed - setuptools doesn't allow parent directory access
requires-python = ">=3.11"
license = "MIT"
authors = [
    {name = "IntelliPost Team", email = "dev@intellipost.ai"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.115.0,<0.116.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "httpx>=0.28.0,<0.29.0",
    "pillow>=11.0.0,<12.0.0",
    "python-dotenv>=1.0.0",
]

# Dev dependencies now managed by uvx and package.json
# [project.optional-dependencies]
# dev = [
#     "ruff>=0.1.7",
#     "pyright>=1.1.340",
#     "pytest>=7.4.0",
#     "pytest-asyncio>=0.21.0",
#     "pytest-cov>=4.1.0",
#     "pre-commit>=3.6.0",
#     "tach>=0.9.0",
# ]

[project.urls]
Homepage = "https://github.com/intellipost/intellipost-ia"
Documentation = "https://intellipost-ia.readthedocs.io/"
Repository = "https://github.com/intellipost/intellipost-ia"
"Bug Tracker" = "https://github.com/intellipost/intellipost-ia/issues"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "SIM102", # Use a single if-statement instead of nested if-statements
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["intellipost"]

# Pyright configuration
[tool.pyright]
include = [".", "../tests"]
exclude = ["**/__pycache__"]
venvPath = "."
venv = ".venv"
pythonVersion = "3.11"
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false
reportPrivateUsage = true
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["../tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Setuptools configuration
[tool.setuptools.packages.find]
where = ["."]
include = ["*"]

# Tach configuration moved to separate tach.toml file

# Dev dependencies now managed by uvx and package.json
# Use: uvx ruff, uvx pyright, uvx tach, uvx pre-commit
[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "coverage[toml]>=7.0.0",
    "respx>=0.22.0",
    "testcontainers>=4.10.0",
]
