interfaces = []
exclude = ["migrations", "intellipost", "tests"]
source_roots = [
    ".",
]
root_module = "allow"

# Shared layer - cross-cutting concerns and value objects
[[modules]]
path = "shared"
depends_on = []

# Infrastructure layer - shared utilities only
[[modules]]
path = "infrastructure"
depends_on = []

# Root application - only depends on api and infrastructure (clean orchestrator)
[[modules]]
path = "<root>"
depends_on = ["api", "infrastructure"]

# Global API layer - only depends on infrastructure for basic DI
[[modules]]
path = "api"
depends_on = [
    "infrastructure",
    "api.dependencies",
]

# API Dependencies - handles all cross-module dependency injection
[[modules]]
path = "api.dependencies"
depends_on = [
    "infrastructure",
    "modules.user_management.domain",
    "modules.user_management.application",
    "modules.user_management.infrastructure",
    "modules.user_management.api",
    "modules.product_management.infrastructure",
    "modules.product_management.api",
    "modules.product_management.application",
    "modules.content_generation.domain",
    "modules.content_generation.application",
    "modules.content_generation.infrastructure",
    "modules.content_generation.api",
]

# ========================================
# HEXAGONAL ARCHITECTURE ENFORCEMENT
# ========================================

# User Management module - TRUE INDEPENDENCE with protocols
[[modules]]
path = "modules.user_management"
depends_on = []

# User Management - Domain Layer (Pure business logic, can use shared value objects)
[[modules]]
path = "modules.user_management.domain"
depends_on = ["shared"]

# User Management - Application Layer (Use cases, can only depend on domain)
[[modules]]
path = "modules.user_management.application"
depends_on = ["modules.user_management.domain"]

# User Management - Infrastructure Layer (External concerns, depends on domain for contracts)
[[modules]]
path = "modules.user_management.infrastructure"
depends_on = ["modules.user_management.domain", "infrastructure"]

# User Management - API Layer (Controllers, depends on application, infrastructure, and domain)
[[modules]]
path = "modules.user_management.api"
depends_on = ["modules.user_management.application", "modules.user_management.domain", "modules.user_management.infrastructure", "api", "api.dependencies"]

# Product Management module - TRUE INDEPENDENCE
[[modules]]
path = "modules.product_management"
depends_on = ["modules.product_management.domain"]

# Product Management - Domain Layer (Pure business logic, can use shared value objects)
[[modules]]
path = "modules.product_management.domain"
depends_on = ["shared"]

# Product Management - Application Layer (Use cases, can only depend on domain)
[[modules]]
path = "modules.product_management.application"
depends_on = ["infrastructure", "modules.product_management.domain", "modules.product_management.infrastructure"]

# Product Management - Infrastructure Layer (External concerns, depends on domain for contracts)
[[modules]]
path = "modules.product_management.infrastructure"
depends_on = ["infrastructure", "modules.product_management.domain"]

# Product Management - API Layer (Controllers, depends on application, infrastructure, and domain)
[[modules]]
path = "modules.product_management.api"
depends_on = ["infrastructure", "modules.user_management.domain", "modules.product_management.application"]

# Content Generation module - TRUE INDEPENDENCE
[[modules]]
path = "modules.content_generation"
depends_on = []

# Content Generation - Domain Layer (Pure business logic, can use shared value objects)
[[modules]]
path = "modules.content_generation.domain"
depends_on = ["shared"]

# Content Generation - Application Layer (Use cases, can only depend on domain)
[[modules]]
path = "modules.content_generation.application"
depends_on = ["modules.content_generation.domain"]

# Content Generation - Infrastructure Layer (External concerns, depends on domain for contracts)
[[modules]]
path = "modules.content_generation.infrastructure"
depends_on = ["modules.content_generation.domain", "infrastructure", "shared"]

# Content Generation - API Layer (Controllers, depends on application, infrastructure, and domain)
[[modules]]
path = "modules.content_generation.api"
depends_on = ["modules.content_generation.application", "modules.content_generation.domain", "modules.content_generation.infrastructure", "modules.user_management.domain", "api"]

# Marketplace Integration module - TRUE INDEPENDENCE
[[modules]]
path = "modules.marketplace_integration"
depends_on = []

# Marketplace Integration - Domain Layer (Pure business logic, can use shared value objects)
[[modules]]
path = "modules.marketplace_integration.domain"
depends_on = ["shared"]

# Marketplace Integration - Application Layer (Use cases, can only depend on domain)
[[modules]]
path = "modules.marketplace_integration.application"
depends_on = []

# Marketplace Integration - Infrastructure Layer (External concerns, depends on domain for contracts)
[[modules]]
path = "modules.marketplace_integration.infrastructure"
depends_on = []

# Marketplace Integration - API Layer (Controllers, depends on application, infrastructure, and domain)
[[modules]]
path = "modules.marketplace_integration.api"
depends_on = []

# Notifications module - TRUE INDEPENDENCE
[[modules]]
path = "modules.notifications"
depends_on = []

# Notifications - Domain Layer (Pure business logic, can use shared value objects)
[[modules]]
path = "modules.notifications.domain"
depends_on = ["shared"]

# Notifications - Application Layer (Use cases, can only depend on domain)
[[modules]]
path = "modules.notifications.application"
depends_on = []

# Notifications - Infrastructure Layer (External concerns, depends on domain for contracts)
[[modules]]
path = "modules.notifications.infrastructure"
depends_on = []

# Notifications - API Layer (Controllers, depends on application, infrastructure, and domain)
[[modules]]
path = "modules.notifications.api"
depends_on = []
