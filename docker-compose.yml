version: '3.8'

services:
  # PostgreSQL for development
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: intellipost_dev
      POSTGRES_USER: intellipost_user
      POSTGRES_PASSWORD: intellipost_password
    ports:
      - "5443:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U intellipost_user -d intellipost_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - intellipost-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - intellipost-network

  # MinIO for development (S3-compatible object storage)
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: dev_access_key
      MINIO_ROOT_PASSWORD: dev_secret_key
    ports:
      - "9002:9000"  # API port
      - "9091:9090"  # Console port
    command: server /data --console-address ":9090"
    volumes:
      - minio_dev_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - intellipost-network

  # Database Migration Service
  # Runs Alembic migrations before starting the backend
  migrations:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      INTELLIPOST_ENVIRONMENT: development
      INTELLIPOST_DATABASE_URL: postgresql+asyncpg://intellipost_user:intellipost_password@postgres:5432/intellipost_dev
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - intellipost-network
    command: >
      sh -c "alembic upgrade head && echo 'Database migrations completed successfully'"
    profiles:
      - migration  # Only run when explicitly requested

  # Backend API (Production-like testing)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      INTELLIPOST_ENVIRONMENT: development
      INTELLIPOST_DATABASE_URL: postgresql+asyncpg://intellipost_user:intellipost_password@postgres:5432/intellipost_dev
      INTELLIPOST_REDIS_URL: redis://redis:6379/0
      INTELLIPOST_S3_ENDPOINT_URL: http://minio:9000
      INTELLIPOST_S3_ACCESS_KEY: dev_access_key
      INTELLIPOST_S3_SECRET_KEY: dev_secret_key
      INTELLIPOST_S3_BUCKET_NAME: intellipost-storage
    ports:
      - "8080:8000"
    stop_grace_period: 1s
    stop_signal: SIGKILL
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      # Note: Backend doesn't depend on migrations service directly
      # Migrations should be run separately: docker compose --profile migration up migrations
    networks:
      - intellipost-network
    # For production-like testing: runs migrations and starts uvicorn (no hot reload)
    command: >
      sh -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1 --loop uvloop"

  # Backend API (Development with hot reload)
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      INTELLIPOST_ENVIRONMENT: development
      INTELLIPOST_DATABASE_URL: postgresql+asyncpg://intellipost_user:intellipost_password@postgres:5432/intellipost_dev
      INTELLIPOST_REDIS_URL: redis://redis:6379/0
      INTELLIPOST_S3_ENDPOINT_URL: http://minio:9000
      INTELLIPOST_S3_ACCESS_KEY: dev_access_key
      INTELLIPOST_S3_SECRET_KEY: dev_secret_key
      INTELLIPOST_S3_BUCKET_NAME: intellipost-storage
    ports:
      - "8080:8000"
    stop_grace_period: 1s
    stop_signal: SIGKILL
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/.venv  # Don't mount the virtual environment
    networks:
      - intellipost-network
    entrypoint: ["/app/entrypoint-dev.sh"]
    # For development: includes migration check and hot reload
    command: >
      sh -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    profiles:
      - dev  # Only run when explicitly requested

  # Frontend SvelteKit
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:8080
    ports:
      - "4000:3000"
    stop_grace_period: 1s
    stop_signal: SIGTERM
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Don't mount node_modules
    networks:
      - intellipost-network
    command: npm run dev -- --host 0.0.0.0 --port 3000

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  minio_dev_data:
    driver: local

networks:
  intellipost-network:
    driver: bridge
