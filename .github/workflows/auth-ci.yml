name: Authentication System CI

on:
  push:
    branches: [ main, develop, feature/*auth* ]
    paths:
      - 'backend/modules/auth/**'
      - 'backend/modules/user/**'
      - 'frontend/src/lib/auth/**'
      - 'frontend/src/lib/stores/auth.ts'
      - 'tests/**/*auth*'
      - '.github/workflows/auth-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/modules/auth/**'
      - 'backend/modules/user/**'
      - 'frontend/src/lib/auth/**'
      - 'frontend/src/lib/stores/auth.ts'
      - 'tests/**/*auth*'

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '18'

jobs:
  backend-auth-tests:
    name: Backend Authentication Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: intellipost_user
          POSTGRES_PASSWORD: intellipost_password
          POSTGRES_DB: intellipost_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      INTELLIPOST_ENVIRONMENT: testing
      INTELLIPOST_DEBUG: true
      INTELLIPOST_DATABASE_URL: postgresql+asyncpg://intellipost_user:intellipost_password@localhost:5432/intellipost_test
      INTELLIPOST_SECRET_KEY: test-secret-key-for-ci
      INTELLIPOST_JWT_SECRET_KEY: test-jwt-secret-key-for-ci
      INTELLIPOST_JWT_ALGORITHM: HS256
      INTELLIPOST_JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 15
      INTELLIPOST_JWT_REFRESH_TOKEN_EXPIRE_DAYS: 7

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Add uv to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install backend dependencies
      run: |
        cd backend
        uv sync

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U intellipost_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run database migrations
      run: |
        cd backend
        uv run alembic upgrade head

    - name: Run authentication unit tests
      run: |
        cd backend
        uv run pytest tests/modules/user/ -v --tb=short

    - name: Run authentication integration tests
      run: |
        cd backend
        uv run pytest tests/integration/api/test_auth_flow.py -v --tb=short

    - name: Run authentication tests with coverage
      run: |
        cd backend
        uv run pytest tests/modules/user/ tests/integration/api/test_auth_flow.py \
          --cov=backend.modules.user \
          --cov=backend.modules.auth \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend-auth
        name: backend-auth-coverage

    - name: Test authentication performance
      run: |
        cd backend
        # Start server in background
        uv run uvicorn main:app --host 127.0.0.1 --port 8000 &
        SERVER_PID=$!

        # Wait for server to start
        sleep 10

        # Test registration performance
        REGISTER_TIME=$(curl -w "%{time_total}" -o /dev/null -s \
          -X POST http://localhost:8000/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"perf@example.com","password":"PerfTest123!","first_name":"Perf","last_name":"Test"}')

        # Test login performance
        LOGIN_TIME=$(curl -w "%{time_total}" -o /dev/null -s \
          -X POST http://localhost:8000/auth/login \
          -H "Content-Type: application/json" \
          -d '{"email":"perf@example.com","password":"PerfTest123!"}')

        # Kill server
        kill $SERVER_PID

        # Check performance requirements (< 0.2 seconds = 200ms)
        echo "Registration time: ${REGISTER_TIME}s"
        echo "Login time: ${LOGIN_TIME}s"

        # Fail if performance requirements not met
        python3 -c "
        import sys
        register_time = float('$REGISTER_TIME')
        login_time = float('$LOGIN_TIME')
        if register_time > 0.2:
            print(f'Registration took {register_time}s, exceeds 200ms requirement')
            sys.exit(1)
        if login_time > 0.2:
            print(f'Login took {login_time}s, exceeds 200ms requirement')
            sys.exit(1)
        print('Performance requirements met')
        "

  frontend-auth-tests:
    name: Frontend Authentication Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend unit tests
      run: |
        cd frontend
        npm run test

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install --with-deps

    - name: Start backend for E2E tests
      run: |
        cd backend
        # Install dependencies if not cached
        pip install -r requirements.txt || true

        # Set up test database
        export INTELLIPOST_ENVIRONMENT=testing
        export INTELLIPOST_DATABASE_URL=postgresql+asyncpg://intellipost_user:intellipost_password@localhost:5432/intellipost_test
        export INTELLIPOST_SECRET_KEY=test-secret-key-for-e2e
        export INTELLIPOST_JWT_SECRET_KEY=test-jwt-secret-key-for-e2e

        # Start server in background
        python -m uvicorn main:app --host 127.0.0.1 --port 8000 &
        echo $! > backend.pid

        # Wait for server to be ready
        sleep 15
      env:
        INTELLIPOST_ENVIRONMENT: testing
        INTELLIPOST_DATABASE_URL: postgresql+asyncpg://intellipost_user:intellipost_password@localhost:5432/intellipost_test
        INTELLIPOST_SECRET_KEY: test-secret-key-for-e2e
        INTELLIPOST_JWT_SECRET_KEY: test-jwt-secret-key-for-e2e

    - name: Start frontend for E2E tests
      run: |
        cd frontend
        npm run build
        npm run preview &
        echo $! > frontend.pid

        # Wait for frontend to be ready
        sleep 10

    - name: Run authentication E2E tests
      run: |
        cd frontend
        npx playwright test tests/e2e/auth-flow.spec.ts

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 7

    - name: Stop servers
      if: always()
      run: |
        # Stop backend
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
          rm backend.pid
        fi

        # Stop frontend
        if [ -f frontend.pid ]; then
          kill $(cat frontend.pid) || true
          rm frontend.pid
        fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        cd backend
        bandit -r modules/auth/ modules/user/ -f json -o bandit-report.json || true
        bandit -r modules/auth/ modules/user/

    - name: Run Safety dependency check
      run: |
        cd backend
        safety check --json --output safety-report.json || true
        safety check

    - name: Set up Node.js for frontend security
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level moderate

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
        retention-days: 7

  integration-tests:
    name: Full Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-auth-tests, frontend-auth-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: intellipost_user
          POSTGRES_PASSWORD: intellipost_password
          POSTGRES_DB: intellipost_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run full authentication integration test
      run: |
        # Start backend
        cd backend
        export INTELLIPOST_ENVIRONMENT=testing
        export INTELLIPOST_DATABASE_URL=postgresql+asyncpg://intellipost_user:intellipost_password@localhost:5432/intellipost_test
        export INTELLIPOST_SECRET_KEY=integration-test-secret
        export INTELLIPOST_JWT_SECRET_KEY=integration-test-jwt-secret

        python -m uvicorn main:app --host 127.0.0.1 --port 8000 &
        BACKEND_PID=$!

        # Wait for backend
        sleep 15

        # Build and start frontend
        cd ../frontend
        npm run build
        npm run preview &
        FRONTEND_PID=$!

        # Wait for frontend
        sleep 10

        # Run end-to-end authentication flow test
        curl -f http://localhost:3000 || exit 1
        curl -f http://localhost:8000/health || exit 1

        # Test complete auth flow via API
        REGISTER_RESPONSE=$(curl -s -X POST http://localhost:8000/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"integration@example.com","password":"Integration123!","first_name":"Integration","last_name":"Test"}')

        echo "Registration response: $REGISTER_RESPONSE"

        # Extract access token
        ACCESS_TOKEN=$(echo $REGISTER_RESPONSE | python3 -c "import sys, json; data=json.load(sys.stdin); print(data['tokens']['access_token'])")

        # Test authenticated endpoint
        PROFILE_RESPONSE=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" http://localhost:8000/auth/me)

        echo "Profile response: $PROFILE_RESPONSE"

        # Cleanup
        kill $BACKEND_PID $FRONTEND_PID

        echo "Full integration test completed successfully"

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [backend-auth-tests, frontend-auth-tests, security-audit, integration-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation completeness
      run: |
        # Verify authentication documentation exists
        test -f docs/api/authentication-endpoints.md
        test -f docs/setup/authentication-setup.md

        # Check for setup instructions
        grep -q "Environment Variables" docs/setup/authentication-setup.md
        grep -q "Backend Setup" docs/setup/authentication-setup.md
        grep -q "Frontend Setup" docs/setup/authentication-setup.md
        grep -q "Security Configuration" docs/setup/authentication-setup.md

        echo "Documentation completeness check passed"

    - name: Check environment configuration
      run: |
        # Verify production environment variables are documented
        grep -q "INTELLIPOST_SECRET_KEY" docs/setup/authentication-setup.md
        grep -q "INTELLIPOST_JWT_SECRET_KEY" docs/setup/authentication-setup.md
        grep -q "production" docs/setup/authentication-setup.md

        echo "Environment configuration check passed"

    - name: Validate migration scripts
      run: |
        # Check database migration exists
        test -f backend/migrations/versions/*create_users_table*.py

        # Verify migration has upgrade and downgrade functions
        grep -q "def upgrade" backend/migrations/versions/*create_users_table*.py
        grep -q "def downgrade" backend/migrations/versions/*create_users_table*.py

        echo "Migration scripts validation passed"

    - name: Performance requirements check
      run: |
        # Verify performance requirements are documented
        grep -q "200ms" docs/api/authentication-endpoints.md
        grep -q "Response Time" docs/api/authentication-endpoints.md

        echo "Performance requirements check passed"

    - name: Generate deployment summary
      run: |
        echo "## Authentication System Deployment Readiness" > deployment-summary.md
        echo "" >> deployment-summary.md
        echo "✅ All tests passing" >> deployment-summary.md
        echo "✅ Security audit completed" >> deployment-summary.md
        echo "✅ Integration tests successful" >> deployment-summary.md
        echo "✅ Documentation complete" >> deployment-summary.md
        echo "✅ Performance requirements validated" >> deployment-summary.md
        echo "✅ Database migrations ready" >> deployment-summary.md
        echo "" >> deployment-summary.md
        echo "Ready for deployment to production." >> deployment-summary.md

        cat deployment-summary.md

    - name: Upload deployment summary
      uses: actions/upload-artifact@v4
      with:
        name: deployment-summary
        path: deployment-summary.md
        retention-days: 30
