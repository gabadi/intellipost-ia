name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install uv
        run: pip install uv

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            ./backend/.venv
          key: uv-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          uv sync --all-groups
          # Install package in editable mode to ensure proper module imports
          echo "Installing package in editable mode..."
          uv pip install -e .
          echo "Package installation completed. Checking pip list..."
          uv pip list | grep intellipost
          echo "Checking if package is in site-packages..."
          uv run python -c "import sys; import site; print('Site packages:', site.getsitepackages())"
          # Verify installation was successful
          uv run python -c "import sys; print('Python path setup:'); [print(f'  {p}') for p in sys.path]"

      - name: Validate package imports
        working-directory: ./backend
        run: |
          # Test critical imports to ensure package structure is correct
          echo "Testing critical module imports..."
          echo "Current directory: $(pwd)"
          echo "Package structure:"
          ls -la modules/user_management/infrastructure/models/
          echo "Python path during import test:"
          uv run python -c "
          import sys
          import os
          print('Python path:', sys.path)
          print('Current working directory:', os.getcwd())
          print('Testing imports...')
          try:
              import modules.user_management.infrastructure.models.user_model
              print('✓ modules.user_management.infrastructure.models.user_model imported successfully')
          except ImportError as e:
              print(f'✗ Failed to import modules.user_management.infrastructure.models.user_model: {e}')
              print('Available packages in sys.modules:', [m for m in sys.modules.keys() if m.startswith('modules')])
              sys.exit(1)

          try:
              import modules.user_management.infrastructure.middleware
              print('✓ modules.user_management.infrastructure.middleware imported successfully')
          except ImportError as e:
              print(f'✗ Failed to import modules.user_management.infrastructure.middleware: {e}')
              sys.exit(1)

          try:
              import modules.user_management.domain.entities.user
              print('✓ modules.user_management.domain.entities.user imported successfully')
          except ImportError as e:
              print(f'✗ Failed to import modules.user_management.domain.entities.user: {e}')
              sys.exit(1)

          print('All critical imports passed!')
          "

      - name: Run backend linting and formatting
        working-directory: ./backend
        run: |
          uvx ruff check .
          uvx ruff check --select I . # Check import sorting

      - name: Run backend type checking
        working-directory: ./backend
        run: |
          # Debug: Check directory structure
          echo "Current directory structure:"
          ls -la
          echo "Modules directory:"
          ls -la modules/
          echo "User management structure:"
          find modules/user_management -name "*.py" | head -10
          # Type checking - should work with editable install
          uv run pyright

      - name: Run backend architectural checks
        working-directory: ./backend
        run: |
          uvx tach check

      - name: Run backend security checks
        working-directory: ./backend
        run: |
          uvx bandit -r modules/ infrastructure/ api/ --exclude='*/tests/*,*/test_*.py,*/fixtures/*' --skip=B101,B601

      - name: Run backend unit tests
        working-directory: ./backend
        env:
          # Ensure environment variables are properly set for testing
          INTELLIPOST_ENVIRONMENT: testing
          INTELLIPOST_API_PORT: 8000
          INTELLIPOST_API_HOST: 127.0.0.1
          INTELLIPOST_DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
          INTELLIPOST_LOG_LEVEL: INFO
          INTELLIPOST_SECRET_KEY: test-secret-key-for-ci-only
        run: |
          uv run pytest -v modules/ infrastructure/tests/ --disable-warnings --tb=short

      - name: Run backend integration tests
        working-directory: ./backend
        env:
          # Ensure environment variables are properly set for testing
          INTELLIPOST_ENVIRONMENT: testing
          INTELLIPOST_API_PORT: 8000
          INTELLIPOST_API_HOST: 127.0.0.1
          INTELLIPOST_DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
          INTELLIPOST_LOG_LEVEL: INFO
          INTELLIPOST_SECRET_KEY: test-secret-key-for-ci-only
        run: |
          uv run pytest -v ../tests/integration/ --disable-warnings --tb=short


  frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10'
          cache: 'npm'
          cache-dependency-path: |
            ./package-lock.json
            ./frontend/package-lock.json

      - name: Install uv (needed for prepare script)
        run: pip install uv

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          # Clean install to ensure fresh state
          npm ci
          # Verify prettier and eslint are installed and accessible
          npx prettier --version
          npx eslint --version

      - name: Run frontend type checking and linting
        working-directory: ./frontend
        run: |
          # Run svelte-kit sync first to generate .svelte-kit/tsconfig.json for ESLint
          npm run check
          # Now run linting with proper TypeScript configuration
          npm run format:check
          npm run lint:eslint

      - name: Run frontend build
        working-directory: ./frontend
        run: npm run build

      - name: Run frontend unit tests
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: http://localhost:8000
        run: npm run test:coverage

      - name: Check coverage files
        working-directory: ./frontend
        run: |
          echo "Checking for coverage files..."
          ls -la .
          ls -la coverage/ || echo "No coverage directory found"
          find . -name "coverage-summary.json" -type f || echo "No coverage-summary.json found"
          echo "Coverage directory contents:"
          ls -la coverage/ 2>/dev/null || echo "Coverage directory not found"

      - name: Vitest Coverage Report
        uses: davelosert/vitest-coverage-report-action@v2
        if: always()
        with:
          github-token: ${{ github.token }}
          json-summary-path: './frontend/coverage/coverage-summary.json'
          json-final-path: './frontend/coverage/coverage-final.json'
          file-coverage-mode: 'changes'
          vite-config-path: './frontend/vite.config.ts'
          working-directory: '.'
