workflow:
  id: story-simple
  name: Simple Story - UX/Content/Minor Changes
  description: >-
    Streamlined workflow for UI improvements, content changes, simple bug fixes, and minor backend adjustments.
    Uses temp folder for coordination, outputs actionable items only, includes automatic cleanup.
    Optimized for changes that don't require comprehensive cross-specialist validation.
  type: story-simple

  temp_folder_configuration:
    working_directory: ".story-implementation/"
    cleanup_before_pr: true
    final_story_pattern: "epic{epic_number}.story{story_number}.story.md"

  documentation_limits:
    max_lines_per_temp_file: 30
    actionable_items_only: true
    no_process_documentation: true

  variables:
    temp_folder: ".story-implementation/"
    issues_file: "{temp_folder}issues-found.md"
    decisions_file: "{temp_folder}decisions-needed.md"
    implementation_file: "{temp_folder}implementation-summary.md"
    learning_items_file: "{temp_folder}learning-items.md"
    learning_final_file: "{temp_folder}learning-final.md"
    fixes_summary_file: "{temp_folder}fixes-summary.md"
    validation_results_file: "{temp_folder}validation-results.md"
    approval_notes_file: "{temp_folder}approval-notes.md"

  visualization: |
    ```mermaid
    flowchart TD
        A[Story Number] --> A1{PO: Story Already<br/>Approved?}
        A1 -->|Yes| B[Dev: Implement Story]
        A1 -->|No| A2[PO: Approve Story<br/>Skip Epic if <7 days]
        A2 --> B

        B --> C{Dev: Pre-Review<br/>Validation DoD}
        C -->|Pass| D[Architect: Review<br/>Technical Design]
        C -->|Fail| C2[Dev: Fix Issues<br/>max 3 retries]
        C2 --> C

        D -->|Issues Found| E[Dev: Implement<br/>Architect Fixes]
        D -->|Pass| F[Architect: Learning<br/>Triage Capture]
        E --> E2{Dev: Validate Fixes}
        E2 -->|Pass| F
        E2 -->|Fail| E3[Dev: Additional Fixes<br/>max 2 retries]
        E3 --> E2

        F --> G[Dev: Commit &<br/>Prepare PR Context]
        G --> H[SM: Update<br/>Epic Progress]
        H --> I[PO: Create<br/>Comprehensive PR]
        I --> J[Story: Complete<br/>PR Delivered]

        %% Styling
        classDef simple fill:#e1f5fe
        classDef validation fill:#fff3e0
        classDef implementation fill:#f3e5f5
        classDef delivery fill:#e8f5e8

        class A1,A2 simple
        class C,D,E,E2 validation
        class B,E,E3 implementation
        class F,G,H,I,J delivery
    ```

  inputs:
    epic_number:
      type: string
      description: The epic number (e.g., "1", "2", "3")
      required: true
    story_number:
      type: string
      description: The story number within the epic (e.g., "1", "2", "3")
      required: true

  outputs:
    story_file:
      type: string
      description: Path to the approved story file
      format: "docs/stories/epic{epic_number}.story{story_number}.story.md"
    story_status:
      type: string
      description: Final story status
      expected: "Done"
    implementation_status:
      type: string
      description: Implementation completion status
      expected: "Complete"

  steps:
    - step: validate_story_approved
      agent: po
      action: approve-story-for-development
      inputs:
        - epic_number
        - story_number
        - approval_threshold: 90
      condition: "skip_epic_validation_if_same_epic_within_7_days"
      success_criteria: "CRITICAL: Story must achieve minimum 90% approval threshold (4.5/5 validation criteria) to proceed to development"
      notes: "REQUIRED: Use Task tool for execution - Validate story readiness with 90% threshold requirement, skip epic validation if same epic validated within 7 days"
      story_status_update: "Approved"

    - step: implement_story
      agent: dev
      action: implement-story-development
      requires: validate_story_approved
      inputs:
        - story_file
        - epic_number
        - story_number
      notes: "REQUIRED: Use Task tool for execution - Complete story implementation with validation (includes project quality gates)"
      story_status_update: "In Progress"

    - step: pre_review_validation
      agent: dev
      action: execute-checklist
      requires: implement_story
      inputs:
        - story_file
      checklist: story-dod-checklist.md
      notes: "REQUIRED: Use Task tool for execution - Final validation before reviews - ensures project quality gates pass"
      story_status_update: "Review"
      checklist_completion_tracking: true

    - step: setup_temp_workspace
      action: internal
      requires: pre_review_validation
      create_directory: "{temp_folder}"
      notes: "Create temporary workspace for workflow coordination"

    - step: technical_review
      agent: qa
      action: review-story
      requires: setup_temp_workspace
      inputs:
        - story_file
      outputs:
        - review_results (object)
        - issues_found (array)
      notes: "REQUIRED: Use Task tool for execution - Senior developer code review with direct refactoring capability for simple changes"

    - step: implement_fixes
      agent: dev
      action: implement-consolidated-fixes
      requires: technical_review
      inputs:
        - story_file
        - issues_found
      outputs:
        - fixes_summary (object)
        - fixes_status (string)
      condition: "if_technical_review_has_issues"
      file_outputs:
        - file: "{fixes_summary_file}"
          content: "fixes_summary"
      notes: "REQUIRED: Use Task tool for execution - Implement fixes from senior developer review if issues identified"

    - step: validate_fixes
      agent: architect
      action: validate-consolidated-fixes
      requires: implement_fixes
      inputs:
        - story_file
        - issues_found
        - fixes_summary
      outputs:
        - validation_approved (boolean)
        - validation_notes (string)
      condition: "if_fixes_were_implemented"
      file_outputs:
        - file: "{approval_notes_file}"
          content: "validation_notes"
      notes: "REQUIRED: Use Task tool for execution - Architect validates fixes using story docs"
      story_status_update: "Implementation Validated"

    - step: capture_basic_learning
      agent: architect
      action: capture-learning-triage
      requires: [technical_review, validate_fixes]
      inputs:
        - story_file
        - review_results
        - fixes_summary
      outputs:
        - basic_learning_items (array)
        - improvement_suggestions (array)
      file_outputs:
        - file: "{learning_items_file}"
          content: "basic_learning_items"
      notes: "REQUIRED: Use Task tool for execution - Extract learnings into structured categories for simple story context"
      story_status_update: "Learning Extracted"

    - step: commit_and_prepare_pr
      agent: dev
      action: commit-and-prepare-pr
      requires: capture_basic_learning
      inputs:
        - story_file
        - basic_learning_items
        - fixes_summary
      outputs:
        - commit_info (object)
        - pr_context (string)
      notes: "REQUIRED: Use Task tool for execution - Commit implementation changes and prepare comprehensive PR context"
      story_status_update: "Changes Committed"

    - step: create_comprehensive_pr
      agent: po
      action: create-comprehensive-pr
      requires: commit_and_prepare_pr
      inputs:
        - story_file
        - commit_info
        - pr_context
        - basic_learning_items
        - epic_number
      outputs:
        - pr_title (string)
        - pr_description (string)
        - story_update (object)
      file_outputs:
        - action: update_story_file
          file: "docs/stories/epic{epic_number}.story{story_number}.story.md"
          content: "story_update"
        - action: create_github_pr
          title: "pr_title"
          description: "pr_description"
      notes: "REQUIRED: Use Task tool for execution - Create simple PR with essential context"
      story_status_update: "Done - Delivered"

    - step: cleanup_temp_workspace
      action: internal
      requires: create_comprehensive_pr
      remove_directory: "{temp_folder}"
      notes: "Clean up temporary workspace after PR creation"

  success_criteria:
    - Story approved for development (epic validation may be skipped if recent)
    - Story implementation completed with all validations passing
    - Pre-review validation confirms project quality gates pass
    - Single senior developer review validates technical implementation with refactoring
    - Any identified issues are resolved and validated
    - Learning extraction completed with basic triage
    - Implementation committed with comprehensive context
    - Epic completion status auto-calculated during PR creation
    - PR created with business summary and technical details
    - Story status updated to "Done - Delivered"

  failure_handling:
    - halt_on_failure: true
    - Each step must complete successfully before proceeding
    - Failed steps should be retried after addressing issues

  retry_protocols:
    story_approval_failure:
      - Issue: "Story not ready for development or epic validation fails"
      - Action: "PO addresses story readiness or epic issues"
      - Retry: "Re-run validate_story_approved after resolution"
      - Max_retries: 3

    pre_review_failure:
      - Issue: "Project quality gates fail or DoD checklist incomplete"
      - Action: "Dev fixes technical issues and quality problems"
      - Retry: "Re-run pre_review_validation after fixes"
      - Max_retries: 5

    technical_review_failure:
      - Issue: "Technical design or implementation issues identified by senior developer"
      - Action: "Dev implements senior developer feedback through implement_fixes step"
      - Retry: "Proceed to implement_fixes (no retry at review level)"
      - Notes: "Review outcome flows to fix implementation regardless of pass/fail"

    fixes_validation_failure:
      - Issue: "Architect finds fixes incomplete or incorrect"
      - Action: "Dev implements additional fixes based on specific feedback"
      - Retry: "Re-run implement_fixes → validate_fixes cycle"
      - Max_retries: 2
      - Notes: "Simplified retry cycle for single reviewer context"

    learning_triage_failure:
      - Issue: "Learning extraction incomplete or poorly categorized"
      - Action: "Architect re-analyzes implementation context and feedback patterns"
      - Retry: "Re-run capture_basic_learning with improved analysis"
      - Max_retries: 2
      - Notes: "Focus on actionable learning items for simple story context"

    commit_preparation_failure:
      - Issue: "Commit fails or PR context incomplete"
      - Action: "Dev addresses git issues and completes context preparation"
      - Retry: "Re-run commit_and_prepare_pr after resolving issues"
      - Max_retries: 3
      - Notes: "Ensure all quality gates pass before commit"

    pr_creation_failure:
      - Issue: "PR creation fails or context incomplete"
      - Action: "PO addresses GitHub/PR platform issues and completes description"
      - Retry: "Re-run create_comprehensive_pr after resolving platform issues"
      - Max_retries: 3
      - Notes: "Ensure comprehensive business and technical context, and epic completion auto-calculation"

  complexity_validation:
    simple_story_indicators:
      - "UI/UX improvements (styling, layout, visual optimization)"
      - "CSS-based performance optimizations"
      - "Cross-component styling changes WITHOUT new business logic"
      - "Content updates without functional changes"
      - "Simple configuration changes (environment, build settings)"
      - "Documentation updates"
      - "Bug fixes without architectural impact"
      - "Responsive design adjustments"
      - "Visual/accessibility improvements"
      - "Multi-file CSS changes"
      - "Component consolidation (UI refactoring)"

    complex_story_indicators:
      - "New features WITH business logic or data processing"
      - "Database schema changes OR new API endpoints"
      - "Complex state management OR new data flows"
      - "Cross-system integration WITH new functionality"
      - "Authentication/authorization changes"
      - "Performance optimization requiring architecture changes"
      - "Multi-service or backend-frontend integration"
      - "New business workflows or processes"

    validation_warning: |
      ⚠️ WARNING: Story complexity may not match selected workflow.
      Simple workflow selected but story shows complex indicators.
      Consider using story-implementation workflow for comprehensive validation.

  dependencies:
    core_bmad_agents:
      - po (Product Owner)
      - dev (Developer)
      - architect (Technical Architect)
      - sm (Scrum Master)
    core_bmad_tasks:
      - execute-checklist
      - implement-story-development
    core_bmad_checklists:
      - story-dod-checklist.md
      - architect-checklist.md
    expansion_tasks:
      - approve-story-for-development
      - implement-consolidated-fixes
      - validate-consolidated-fixes
      - capture-learning-triage
      - commit-and-prepare-pr
      - create-comprehensive-pr
      - update-epic-progress

  handoff_prompts:
    po_validate_story: "Validate story {epic_number}.{story_number} readiness - may skip epic validation if same epic validated within 7 days"
    dev_implement: "Story approved. Implement story {epic_number}.{story_number} with validation (project quality gates required)"
    pre_review: "Implementation complete. Run final validation before senior developer review - ensure project quality gates pass"
    technical_review: "Pre-review passed. Conduct senior developer code review with refactoring capability for simple story"
    implement_fixes: "Senior developer review complete. Implement any identified fixes and document changes in story"
    validate_fixes: "Fixes implemented. Validate fixes using story documentation"
    capture_learning: "Implementation validated. Extract learnings into structured categories for simple story context"
    commit_prepare: "Learning extraction complete. Commit implementation changes and prepare comprehensive PR context"
    create_pr: "Implementation committed. Create PR with business summary, technical changes, learning extraction, and auto-calculate epic completion status"
    workflow_complete: "Story {epic_number}.{story_number} delivered via simple workflow. Epic completion status auto-calculated. Retrospective: {TRIGGERED/NOT_TRIGGERED} based on completion detection."
